name: Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  production-promotion:
    name: "Promote to Production"
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify staging deployment exists
        run: |
          echo "🔍 Verifying staging deployment before promotion..."
          
          # Check if staging is accessible
          if ! curl -f https://staging.mikeiu.com/api/health > /dev/null 2>&1; then
            echo "❌ Staging deployment not accessible or healthy"
            echo "Cannot promote to production without valid staging deployment"
            exit 1
          fi
          
          echo "✅ Staging deployment verified and healthy"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Production
        run: |
          echo "🚀 Starting production deployment..."
          
          # Deploy to production Vercel project
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
          
          echo "✅ Production deployment completed"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Update production domain
        run: |
          echo "🌐 Updating production domain alias..."
          
          # Get latest deployment URL  
          DEPLOYMENT_URL=$(vercel list --token ${{ secrets.VERCEL_TOKEN }} --limit 1 --format json | jq -r '.[0].url')
          
          if [ -z "$DEPLOYMENT_URL" ] || [ "$DEPLOYMENT_URL" = "null" ]; then
            echo "❌ Could not find production deployment"
            exit 1
          fi
          
          echo "📦 Aliasing deployment: $DEPLOYMENT_URL"
          
          # Update production alias
          vercel alias $DEPLOYMENT_URL mikeiu.com --token ${{ secrets.VERCEL_TOKEN }}
          
          echo "✅ Production domain updated"
          echo "🌐 Live at: https://mikeiu.com"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Apply production database migrations
        run: |
          echo "🗄️ Applying database migrations to production..."
          
          # Setup Supabase CLI
          curl -sSL https://github.com/supabase/cli/releases/download/v1.226.4/supabase_linux_amd64.tar.gz | tar -xz
          sudo mv supabase /usr/local/bin/
          
          # Login and apply migrations
          echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | supabase auth login --token
          supabase link --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}
          
          # Dry run first for safety
          echo "Running migration dry-run..."
          supabase db push --dry-run
          
          # Apply migrations
          echo "Applying migrations to production..."
          supabase db push
          
          echo "✅ Production database migrations applied successfully"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Post-deployment health check
        run: |
          echo "🏥 Running post-deployment health check..."
          sleep 30  # Allow time for deployment to propagate
          
          for i in {1..10}; do
            if curl -f https://mikeiu.com/api/health > /dev/null 2>&1; then
              echo "✅ Production health check passed"
              
              # Get health check response for verification
              HEALTH_RESPONSE=$(curl -s https://mikeiu.com/api/health)
              echo "Health response: $HEALTH_RESPONSE"
              
              echo ""
              echo "🎉 Production deployment successful!"
              echo "📋 Deployment Summary:"
              echo "  • Source: preview branch → main branch"
              echo "  • Database: mike-prod (production)"
              echo "  • Sanity: production dataset"  
              echo "  • Vendor keys: Live production"
              echo "  • Domain: https://mikeiu.com"
              echo "  • Health: ✅ Passing"
              echo ""
              echo "🚀 Production is live and healthy!"
              exit 0
            fi
            echo "Attempt $i: Health check failed, retrying in 30 seconds..."
            sleep 30
          done
          
          echo "❌ Production health check failed after 10 attempts"
          echo "🚨 Manual intervention required!"
          echo "Check https://mikeiu.com manually and verify deployment"
          exit 1

      - name: Notify deployment completion
        if: success()
        run: |
          echo "📢 Production deployment notification"
          echo "✅ Successfully deployed to production"
          echo "🌐 Live URL: https://mikeiu.com"
          echo "⏱️ Deployment completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"