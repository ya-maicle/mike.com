name: Main Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  quality-checks:
    name: "Quality Checks"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Typecheck
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

      - name: Build Storybook
        run: pnpm --filter @maicle/ui build-storybook

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next
            packages/ui/storybook-static
          retention-days: 7

  staging-deployment:
    name: "Deploy to Staging"
    runs-on: ubuntu-latest
    needs: quality-checks
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Apply Supabase migrations to staging
        run: |
          echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | supabase auth login --token
          supabase link --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          supabase db push --dry-run
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --force
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Alias to staging domain
        run: |
          # Get the latest deployment URL
          DEPLOYMENT_URL=$(vercel list --token ${{ secrets.VERCEL_TOKEN }} --limit 1 --format json | jq -r '.[0].url')
          echo "Latest deployment: $DEPLOYMENT_URL"
          # Alias to staging domain
          vercel alias $DEPLOYMENT_URL staging.mikeiu.com --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  smoke-tests:
    name: "Run Staging Smoke Tests"
    runs-on: ubuntu-latest
    needs: staging-deployment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Wait for staging deployment
        run: |
          echo "Waiting for staging deployment to be ready..."
          for i in {1..30}; do
            if curl -f https://staging.mikeiu.com/api/health > /dev/null 2>&1; then
              echo "Staging is ready!"
              break
            fi
            echo "Attempt $i: Staging not ready yet, waiting 10 seconds..."
            sleep 10
          done

      - name: Run smoke tests
        run: pnpm run e2e:smoke:ci
        env:
          PLAYWRIGHT_BASE_URL: https://staging.mikeiu.com

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  production-promotion:
    name: "Promote to Production"
    runs-on: ubuntu-latest
    needs: smoke-tests
    environment: production
    steps:
      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Promote to production
        run: |
          echo "üöÄ Starting production promotion..."
          
          # Get latest deployment URL
          DEPLOYMENT_URL=$(vercel list --token ${{ secrets.VERCEL_TOKEN }} --limit 1 --format json | jq -r '.[0].url')
          
          if [ -z "$DEPLOYMENT_URL" ] || [ "$DEPLOYMENT_URL" = "null" ]; then
            echo "‚ùå Could not find staging deployment"
            exit 1
          fi
          
          echo "üì¶ Promoting deployment: $DEPLOYMENT_URL"
          
          # Promote to production
          vercel promote $DEPLOYMENT_URL --token ${{ secrets.VERCEL_TOKEN }}
          
          # Update production alias
          vercel alias $DEPLOYMENT_URL mikeiu.com --token ${{ secrets.VERCEL_TOKEN }}
          
          echo "‚úÖ Production promotion completed"
          echo "üåê Live at: https://mikeiu.com"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Post-deployment health check
        run: |
          echo "üè• Running post-deployment health check..."
          sleep 30  # Allow time for deployment to propagate
          
          for i in {1..10}; do
            if curl -f https://mikeiu.com/api/health > /dev/null 2>&1; then
              echo "‚úÖ Production health check passed"
              exit 0
            fi
            echo "Attempt $i: Health check failed, retrying in 30 seconds..."
            sleep 30
          done
          
          echo "‚ùå Production health check failed after 10 attempts"
          exit 1
